// Prismaは、Node.jsとTypeScriptのORM（Object-Relational Mapping）ツールであり、データベースとやり取りするための直感的なAPIを提供します。
// このスキーマファイルは、Prismaクライアントの設定とデータベース接続の設定を含んでいます。

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // 使用するデータベースの種類を指定します。
  provider  = "postgresql"
  // 環境変数POSTGRES_PRISMA_URLからデータベース接続URLを取得します。このURLは、プールされた接続
  url       = env("POSTGRES_PRISMA_URL")
  // 環境変数POSTGRES_URL_NON_POOLINGから非プール接続用のURLを取得します。これは、接続プールを使用しない接続に使用されます。
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]

  @@map("users")
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
